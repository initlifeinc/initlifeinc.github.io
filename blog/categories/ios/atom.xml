<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | initlife's Blog]]></title>
  <link href="http://initlifeinc.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://initlifeinc.github.io/"/>
  <updated>2015-10-30T17:38:10+08:00</updated>
  <id>http://initlifeinc.github.io/</id>
  <author>
    <name><![CDATA[initlife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过NSURLProtocol拦截HTTP转HTTPS来整合SPDY的记录]]></title>
    <link href="http://initlifeinc.github.io/blog/2015/10/19/tong-guo-nsurlprotocollan-jie-httpzhuan-httpslai-zheng-he-spdyde-ji-lu/"/>
    <updated>2015-10-19T19:53:35+08:00</updated>
    <id>http://initlifeinc.github.io/blog/2015/10/19/tong-guo-nsurlprotocollan-jie-httpzhuan-httpslai-zheng-he-spdyde-ji-lu</id>
    <content type="html"><![CDATA[<p>众所周知，iOS 9.0之后苹果引入ATS限制，苹果也推荐尽量不要使用HTTP通讯了，毕竟是很不安全的。而国内各个有(wu)节操的运营商也会经常篡改请求HTTP请求。所以如果可能，在不影响性能的情况下，使用https总是更好一点。但是移动网络下HTTPS的握手耗时，也总是很让人难已接受。那么考虑整合Spdy来减少握手时间的损耗，复用链接来进行通讯，是一个不错的尝试。</p>

<p>但对于老的app，尤其是本地已经存储了大量的老旧URL来说，尝试数据升级将本地数据库里的各种http转成https的操作也是令人发指的，尤其是这种操作很不适合做灰度测试发布。总不能数据改来改去，对于那些可能本地存了几万几十万条消息记录的app来说，简直是灾难。因此如何寻求在老的app上完成http的请求转https的请求，以及整合spdy来减少握手时间，提升弱网效果就显的很重要，而我们应该寻找优雅的解决方式来完成过渡。</p>

<p>注：这里不讨论为什么不用HTTP2.0，不选择总有不选择的原因，再换个角度，你完成了spdy的接入，HTTP2.0的接入从大体思路上是类似的。</p>

<p>注：由于NSURLProtocol的拦截及再发送，涉及的坑很多，这里先不讲了，大家也可以参考下<a href="https://github.com/marcuswestin/WebViewProxy">这个</a>，里面已经埋了不少坑。</p>

<h2>Spdy的选择及注意事项</h2>

<p>对于iOS来说，现有的spdy开源库，暂时可以考虑<a href="https://github.com/twitter/CocoaSPDY">CocoaSpdy</a>, 说起Spdy，大家第一反应一般是多路复用请求（multiplexing requests），头部压缩等特性，其实Spdy的设计里充分考虑了cancel的需要，这个特性其实也是非常重要的，否则复用链接会引入一个灾难的问题（就是上层已经cancel的请求在复用链路中堆积而影响后续各种请求）。</p>

<p>注：以下我们考虑的是采用NSURLConnection的请求的拦截。</p>

<p>CocoaSpdy的设计里采用在SPDYURLConnectionProtocol的load函数里将自己注册到NSURLProtocol里，作为独立的第三方库，这个可以帮你省却一些烦恼，快速接入Spdy。</p>

<p>但是当你发现你的app可能因为已经引入另一个NSURLProtocol的子类来做流量统计，缓存命中，甚至HTTPDNS的转换（不了解这块的可以查看下<a href="http://mp.weixin.qq.com/s?__biz=MzA3ODgyNzcwMw==&amp;mid=201837080&amp;idx=1&amp;sn=b2a152b84df1c7dbd294ea66037cf262&amp;scene=2&amp;from=timeline&amp;isappinstalled=0#rd">这里</a>）的时候，那么默认的load自动注册可能会引发拦截顺序问题，所以这里我还是注释掉了cocoaspdy的这个代码。改由自己手动注册，注意如果你要关注下注册的顺序和生效的顺序，先注册的后生效。</p>

<h3>接入基本步骤：</h3>

<pre><code>1. 注册SPDYURLConnectionProtocol
2. 注册original，即针对哪个scheme，host，port进行拦截
3. 设置logger的delegate和logLevel，另外可以考虑设置并发数。
4. 等待相关的URL请求触发相关protocol的拦截，CocoaSpdy内部会解析请求，并进行相关请求及返回。
</code></pre>

<p>也可以看下如下的基本代码</p>

<pre><code>// 先注册spdy的protocol
[NSURLProtocol registerClass:[SPDYURLConnectionProtocol class]];
// 下面这个可以先忽略，用于拦截http转https等用处
[NSURLProtocol registerClass:NSClassFromString(@"ILURLProtocol")];

// 注册拦截的规则，这里是预注册，如果你使用过程中有新引入一些域名，也可以临时再添加注册
[SPDYURLConnectionProtocol registerOrigin:@"https://static.dingtalk.com"];
// log的delegate和loglevel
[SPDYProtocol setLogger:self];
[SPDYProtocol setLoggerLevel:SPDYLogLevelDebug];
// 设置pool的并发数，注意，这个是针对每个origin的的size。
SPDYConfiguration *configration = [SPDYProtocol currentConfiguration];
configration.sessionPoolSize = 3;
[SPDYProtocol setConfiguration:configration];


完成后，就可以通过下载https图片来观察下载情况了（注意spdy的日志打印）
比如引入sdwebimage显示图片，

NSString imageurl = @"https://static.dingtalk.com/media/lADOAaoJdM0FNs0D6A_1000_1334.jpg_790x10000g.jpg";
[cell.imageView sd_setImageWithURL:[NSURL URLWithString:imageurl]
                  placeholderImage:[UIImage imageNamed:@"lock"]
                           options:SDWebImageRefreshCached|SDWebImageCacheMemoryOnly
                         completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) {
                                 NSLog(@"%@ %@ %ld", image, error, (long)cacheType);
                             }];
</code></pre>

<h3>Spdy的一些基本概念和关系</h3>

<p>Spdy在SSL层上加了一个SPDY session 层，来实现并发和stream机制。对CocoaSpdy来说，也就有SPDYSessionManager的概念，每个origin（SPDYStream）都有一个session manager（SPDYSessionManager），管理session pool和stream队列，每个session（SPDYSession，相当于一条spdy链接）都可以用来发送stream，每个stream就意味着上层发起的一个request，cancel一个请求，实际上是cancel一个stream，cancel也不是简单的移除stream，更会向服务端发起cancel stream的操作。服务端收到后会停止继续推送当前正在处理的stream请求的数据。这对于大数据量的文件下载尤为重要。</p>

<h2>HTTP进行HTTPDNS和HTTPS的URL拦截转换</h2>

<p>我们需要拦截HTTP，也要拦截那些指定域名被HTTPDNS之后的请求，比如
@&ldquo;<a href="http://static.dingtalk.com/media/lADOAAJMIs0CgM0CgA_640_640.jpg_90x90.jpg">http://static.dingtalk.com/media/lADOAAJMIs0CgM0CgA_640_640.jpg_90x90.jpg</a>&rdquo; 经过httpdns处理之后，获取到的ip可能为 @&ldquo;<a href="http://110.75.113.81/media/lADOAAj5i80CgM0CgA_640_640.jpg_90x90.jpg">http://110.75.113.81/media/lADOAAj5i80CgM0CgA_640_640.jpg_90x90.jpg</a>&#8220;，host填为static.dingtalk.com。
此时我们同样可以将这个<a href="http://110.75.113.81/media/lADOAAj5i80CgM0CgA_640_640.jpg_90x90.jpg">http://110.75.113.81/media/lADOAAj5i80CgM0CgA_640_640.jpg_90x90.jpg</a> 拦截下来（通过在request header里的host判断，当然对于spdy来说，你还需要注册对于110.75.113.81的拦截，而且最好还要添加对于host里的域名判断）。</p>

<p>这里还涉及到如何让spdy支持对IP类型的地址进行https握手建连的问题，这里需要说明的是，服务端配spdy的时候需要支持SNI的扩展，客户端在ssl建连的时候也需要主动握手参数添加kCFStreamSSLPeerName值为host来覆盖用于证书校验的名字。</p>

<p>我修改了下CocoaSpdy里的_tryTLSHandhshake的部分代码，从而让ip类型的服务器地址支持https握手建连。</p>

<pre><code>// 注：SpdyOrigin类被改造支持domainHost参数来保存host值，这样原host就可以保存ip，这里保存时机host了。
if (_endpoint.origin.domainHost.length &gt; 0) {
            NSMutableDictionary *newTlsSettings = [tlsOp-&gt;_tlsSettings mutableCopy];
            newTlsSettings[(__bridge NSString *)kCFStreamSSLPeerName] = _endpoint.origin.domainHost;
            tlsOp-&gt;_tlsSettings = newTlsSettings;
        }
</code></pre>

<p>spdy里http转https的一些主要代码。</p>

<pre><code>+ (BOOL)canInitWithRequest:(NSURLRequest *)request
{
    // 由于我们做的是将http转成https，所以就不怕行程循环触发protocol
    if ([request.URL.scheme isEqualToString:@"http"]) {
        return YES;
    }
    return NO;
}


+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request
{
    return [self tryGetHttpsRequest:request];
}

- (NSURLRequest *)tryGetHttpsRequest:(NSURLRequest *)oldReq
{
    NSString *oldScheme = [[oldReq.URL scheme] lowercaseString];

    if ([oldScheme isEqualToString:@"http"] &amp;&amp; [self shouldInterceptorRequest:oldReq]) {
        NSMutableURLRequest *newReq = [oldReq mutableCopy];
        NSURL *newUrl = [[NSURL alloc] initWithScheme:@"https" host:oldReq.URL.host path:oldReq.URL.path];
        newReq.URL = newUrl;
        // 下面这段代码是因为现有的有spdy服务器对于strem header里中文直接断开连接，而cocoaspdy里获取的是应用的名称，如果你的名称正好是中文，会导致steam一发送就被rst，所以我们主动去创建一个host，这样spdy就不会用内部的defaultuseragent来覆盖
        if (![newReq valueForHTTPHeaderField:@"User-Agent"]) {
            NSMutableDictionary *allHTTPHeaderFields = [newReq.allHTTPHeaderFields mutableCopy];
            [allHTTPHeaderFields setObject:[self getDefaultUserAgent] forKey:@"User-Agent"];
            newReq.allHTTPHeaderFields = allHTTPHeaderFields;
        }
        return newReq;
    }

    return oldReq;
}

- (instancetype)initWithHosts:(NSArray *)hosts
{
    self = [super init];
    if (self)
    {
        //拦截HTTP,并且host为指定的host
        _predicate = [NSPredicate predicateWithFormat:@"scheme MATCHES 'http' AND host IN[cd] %@", hosts];
        _hostPredicate = [NSPredicate predicateWithFormat:@"SELF IN[cd] %@", hosts];
    }

    return self;
}

- (BOOL)shouldInterceptorRequest:(NSURLRequest *)request
{
    if ([self.predicate evaluateWithObject:request.URL])
    {
        return YES;
    }

    // 这个是针对httpdns之后，host已经转到request里的host字段里了，所以做二次判断。
    if ([self isHeaderHostVaild:request]) {
        return YES;
    }

    return NO;
}

- (BOOL)isHeaderHostVaild:(NSURLRequest *)request
{
    NSString *hostInHeader = [request valueForHTTPHeaderField:@"Host"];
    if (hostInHeader &amp;&amp; [self.hostPredicate evaluateWithObject:hostInHeader]) {
        return YES;
    }
    return NO;
}
</code></pre>

<h2>One more thing</h2>

<p>当你完成http转httpdns，转https之后，你可能碰到sdwebimage在滚出页面的时候，会去cancel request，但是走spdy之后，它会触发protocol的stopLoading方法，此时需要关注这个stopLoading触发的时候，此前用于2次转发的NSUrlConnection对象我们需要判断handler是否可用，如果可用，说明并不是正常结束，而是被cancel了，此时应该执行[connectoin cancel]操作。</p>

<h2>关于ATS</h2>

<p>这里简单说明下ATS，不细说，详情各位看官自己google下，一大堆资料,也可以查看<a href="http://initlife.com/blog/2015/09/23/ios9gua-pei/">这里</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9适配]]></title>
    <link href="http://initlifeinc.github.io/blog/2015/09/23/ios9gua-pei/"/>
    <updated>2015-09-23T10:53:46+08:00</updated>
    <id>http://initlifeinc.github.io/blog/2015/09/23/ios9gua-pei</id>
    <content type="html"><![CDATA[<h1>iOS9适配</h1>

<p>提交iOS app的时候，踩了一遍开发都需要踩的坑，虽然其他地方都能找到，这里还是说下自己的坑</p>

<h2>一、App Transport Security</h2>

<p>xcode7安装后，你会发现ios9之后后默认所有http请求都无法继续有效，但是基于现状，我们并不能这么快改成https请求，所以基本上大多数app都会选择兼容老模式</p>

<p>如果服务不改变，则客户端info.plist的根<dict>需加下面的键值（这些key可以手动在project的info里直接添加和修改）</p>

<p>简单信任所有http服务器</p>

<pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
&lt;dict&gt;
    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt; 
    &lt;true/&gt;
&lt;/dict&gt; 
</code></pre>

<p>或者另外严谨一些</p>

<pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
&lt;dict&gt;  
    &lt;key&gt;NSExceptionDomains&lt;/key&gt;  
        &lt;dict&gt;    
            &lt;key&gt;yourserver.com&lt;/key&gt;    
                &lt;dict&gt;      
                &lt;!--Include to allow subdomains--&gt;      
                &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;
                    &lt;true/&gt;
                &lt;!--Include to allow insecure HTTP requests--&gt;                      &lt;key&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/key&gt;     
                    &lt;true/&gt;
                &lt;!--Include to specify minimum TLS version--&gt;      
                &lt;key&gt;NSTemporaryExceptionMinimumTLSVersion&lt;/key&gt;      
                    &lt;string&gt;TLSv1.2&lt;/string&gt;    
                &lt;!--whether domain support forward secrecy using ciphers, if not support, set false--&gt;
                &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;
                    &lt;false/&gt;
                &lt;/dict&gt;  
        &lt;/dict&gt;
&lt;/dict&gt; 
</code></pre>

<p>另外由于苹果的https的限制(注意理论上苹果ATS生效的是调用NSURLConnection, CFURL, or NSURLSession APIs的所有连接)，还不仅仅限于任何https，还必须满足一定的其他要求，比如加密算法的要求，TLS的协议版本等。(详情查看<a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/">https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/</a>)</p>

<p>比如网上有人分析了百度的https就不能满足默认的苹果https安全传输要求，因为它的TLS虽然满足TLS1.2,但是加密算法是：SHA-1 with RSA Encryption ，所以依然会被报警，所以，这种exception的情况也需要额外标注，上面的官方连接也有说明,即添加NSExceptionRequiresForwardSecrecy，并设置为false，禁止forword secrecy。</p>

<h2>二、bitcode</h2>

<p>xcode7 默认开启，bitcode（iwatch需要），则会导致部分第三方框架报错（比如友盟的错误）</p>

<p>libMobClickLibrary.a(MobClick.o)&lsquo; does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture armv7</p>

<p>这是要么更新库，要么可以在 build setting 中，搜索bitcode,并把enable bitcode 设置为 NO，这个因各自app情况而定，实际上本身不会降低上传包大小，只是开启后能降低用户下载的大小。苹果会自动根据用户自身的设备选择相关架构的下载</p>

<h2>三、iOS9安装企业证书打包的app</h2>

<p>企业证书打包的app，安装到手机里面后第一次打开app。不会像以前一样自动提示，信任还是不信任该证书；</p>

<p>这是个时候需要iOS9 设置-》通用-》描述文件-》企业级应用 中信任对应的企业开发者。</p>

<h2>四、iOS9 URL Schemes</h2>

<p>苹果新上线urlScheme的限制</p>

<pre><code>If you call the “canOpenURL” method on a URL that is not in your whitelist, 
    it will return “NO”, even if there is an app installed that has registered to handle this scheme. A “This app is not allowed to query for scheme xxx” syslog entry will appear.

If you call the “openURL” method on a URL that is not in your whitelist, 
    it will fail silently. A “This app is not allowed to query for scheme xxx” syslog entry will appear.
</code></pre>

<p>更多信息:WWDC 2015 Session 703: &ldquo;Privacy and Your App&rdquo;  <a href="https://developer.apple.com/videos/wwdc/2015/?id=703">https://developer.apple.com/videos/wwdc/2015/?id=703</a></p>

<p>因此现在要搞分享的时候，除了要在项目info URL Types中设置URL Schemes，还需要在info.plist里面增加可信任的调用app url scheme，否则回报如下错误</p>

<p>-canOpenURL: failed for URL: &ldquo;weixin://app/wx********/&rdquo; - error: &ldquo;This app is not allowed to query for scheme weixin&rdquo;</p>

<p>只需要添加如下代码即可，在info.plist里加入</p>

<pre><code>&lt;key&gt;LSApplicationQueriesSchemes&lt;/key&gt;
    &lt;array&gt;
    &lt;string&gt;weixin&lt;/string&gt;
    &lt;string&gt;wechat&lt;/string&gt;
    &lt;string&gt;sina&lt;/string&gt;
    &lt;string&gt;weibo&lt;/string&gt;
&lt;/array&gt;
</code></pre>

<p>你也可以查看友盟分享SDK适配iOS9的文档：<a href="http://dev.umeng.com/social/ios/ios9">http://dev.umeng.com/social/ios/ios9</a></p>

<p>未完待续</p>
]]></content>
  </entry>
  
</feed>
